
using System;
using System.Collections.Generic;
using OpenTemple.Core.GameObjects;
using OpenTemple.Core.Systems;
using OpenTemple.Core.Systems.Dialog;
using OpenTemple.Core.Systems.Feats;
using OpenTemple.Core.Systems.D20;
using OpenTemple.Core.Systems.Script;
using OpenTemple.Core.Systems.Spells;
using OpenTemple.Core.Systems.GameObjects;
using OpenTemple.Core.Systems.D20.Conditions;
using OpenTemple.Core.Location;
using OpenTemple.Core.Systems.ObjScript;
using OpenTemple.Core.Ui;
using System.Linq;
using OpenTemple.Core.Systems.Script.Extensions;
using OpenTemple.Core.Utils;
using static OpenTemple.Core.Systems.Script.ScriptUtilities;

namespace Scripts.Spells;

[SpellScript(311)]
public class MinorGlobeOfInvulnerability : BaseSpellScript
{
    private static readonly string MINOR_GLOBE_OF_INVULNERABILITY_KEY = "Sp311_MINOR_GLOBE_OF_INVULNERABILITY_Activelist";
    public override void OnBeginSpellCast(SpellPacketBody spell)
    {
        Logger.Info("Minor Globe of Invulnerability OnBeginSpellCast");
        Logger.Info("spell.target_list={0}", spell.Targets);
        Logger.Info("spell.caster={0} caster.level= {1}", spell.caster, spell.casterLevel);
        AttachParticles("sp-abjuration-conjure", spell.caster);
    }
    public override void OnSpellEffect(SpellPacketBody spell)
    {
        Logger.Info("Minor Globe of Invulnerability OnSpellEffect");
        spell.duration = 1 * spell.casterLevel;
        var target_item = spell.Targets[0];
        var npc = spell.caster; // added so NPC's can use wand/potion/scroll
        if (npc.GetNameId() == 20123) // Falrinth
        {
            spell.duration = 10;
            spell.casterLevel = 10;
        }

        // spell.spell_end( spell.id )
        // activeList = Co8PersistentData.getData(MINOR_GLOBE_OF_INVULNERABILITY_KEY)
        // if activeList == null: activeList = []
        // activeList.append([spell.id, derefHandle(spell)])  # doesn't work, spell objects can't be deref'ed
        // Co8PersistentData.setData(MINOR_GLOBE_OF_INVULNERABILITY_KEY, activeList)
        if (npc.type != ObjectType.pc && npc.GetLeader() == null && spell.duration <= 0)
        {
            spell.duration = 10;
            spell.casterLevel = 10;
        }

        // put sp-Minor Globe condition on target
        var spell_obj_partsys_id = AttachParticles("sp-Minor Globe of Invulnerability", target_item.Object);
        // target_item.partsys_id = game.particles( 'sp-Minor Globe of Invulnerability', target_item.obj )
        target_item.Object.AddCondition("sp-Minor Globe of Invulnerability", spell.spellId, spell.duration, 0, spell_obj_partsys_id);
    }
    // target_item.obj.condition_add_arg_x( 3, spell_obj_partsys_id )
    // objectevent_id = target_item.obj.condition_get_arg_x( 2 )

    public override void OnBeginRound(SpellPacketBody spell)
    {
        Logger.Info("Minor Globe of Invulnerability OnBeginRound");
    }
    public override void OnEndSpellCast(SpellPacketBody spell)
    {
        Logger.Info("Minor Globe of Invulnerability OnEndSpellCast");
        if (spell.caster.GetNameId() == 20123) // Falrinth
        {
            Co8PersistentData.CleanupActiveSpellTargets(MINOR_GLOBE_OF_INVULNERABILITY_KEY, spell.spellId, target =>
            {
                // TODO: this doesnt actually do anything...
            });
        }

    }
    public override void OnAreaOfEffectHit(SpellPacketBody spell)
    {
        Logger.Info("Minor Globe of Invulnerability OnAreaOfEffectHit");
    }
    public override void OnSpellStruck(SpellPacketBody spell)
    {
        Logger.Info("Minor Globe of Invulnerability OnSpellStruck");
    }

}