
name: Nightly Build
on:
  push:
    branches:
      - master

jobs:
  gen-build-number:
    name: Generate build number
    runs-on: ubuntu-latest
    steps:
      - name: Generate build number
        id: buildnumber
        uses: einaregilsson/build-number@v2
        with:
          token: ${{secrets.github_token}}
          prefix: nightly
      - name: Upload build number
        uses: actions/upload-artifact@v1
        with:
          name: BUILD_NUMBER
          path: BUILD_NUMBER

  build-windows:
    needs: gen-build-number
    name: Build for Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
        with:
          lfs: true
      - name: Download build number
        uses: actions/download-artifact@v1
        with:
          name: BUILD_NUMBER
      - name: Restore build number
        id: buildnumber
        uses: einaregilsson/build-number@v2
      # Authenticates packages to push to GPR
      - uses: actions/setup-dotnet@master
        with:
          source-url: https://nuget.pkg.github.com/GrognardsFromHell/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      ### Create MSIX packages
      - name: Create Windows Nightly Build
        run: .\Launcher.Win\build_nightly.ps1 -buildNumber $env:BUILD_NUMBER
        env:
          CODE_SIGNING_PFX: ${{ secrets.CODE_SIGNING_PFX }}
          CODE_SIGNING_PW: ${{ secrets.CODE_SIGNING_PW }}
      - uses: actions/upload-artifact@v1
        with:
          name: nightly_windows
          path: dist/windows

  publish:
    needs: build-windows
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - name: Download Windows Artifacts
        uses: actions/download-artifact@v1
        with:
          name: BUILD_NUMBER
      - uses: actions/download-artifact@v1
        with:
          name: nightly_windows
          path: public/windows
      - uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: 'opentemple-nightlies'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_ENDPOINT: 'https://storage.de.cloud.ovh.net'
          AWS_REGION: 'DE'
          SOURCE_DIR: 'public'
      # Trigger a rebuild of the website to include new nightlies data
      - name: Trigger Website Rebuild
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.SITE_REBUILD_TOKEN }}
          repository: GrognardsFromHell/OpenTemple.Site
          event-type: rebuild-site # This has no special meaning

  # Can currently not build on Linux because of Windows Forms
  # build-linux64:
  #   name: Build (Linux 64-bit)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #       with:
  #         lfs: true
  #     # Add a Nuget source so that the native libs will be found by dotnet cli
  #     - run: |2
  #         echo '<?xml version="1.0" encoding="utf-8"?>
  #         <configuration>
  #           <packageSources>
  #             <add key="ghp" value="https://nuget.pkg.github.com/GrognardsFromHell/index.json" protocolVersion="3" />
  #           </packageSources>
  #           <packageSourceCredentials>
  #             <ghp>
  #               <add key="Username" value="shartte" />
  #               <add key="ClearTextPassword" value="${{ secrets.GITHUB_TOKEN }}" />
  #             </ghp>
  #           </packageSourceCredentials>
  #         </configuration>' > nuget.config
  #     - run: dotnet publish -c Release -o dist --self-contained --version-suffix ${GITHUB_SHA::8} -r linux-x64 Launcher
  #     - run: tar cfJ a opentemple-linux.tar.xz dist
  #       shell: bash
  #     - uses: actions/upload-artifact@v1
  #       with:
  #         name: opentemple-linux
  #         path: opentemple-linux.tar.xz
  # build-osx:
  #   name: Build (MacOS 64-bit)
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #       with:
  #         lfs: true
  #     # Add a Nuget source so that the native libs will be found by dotnet cli
  #     - run: |2
  #         echo '<?xml version="1.0" encoding="utf-8"?>
  #         <configuration>
  #           <packageSources>
  #             <add key="ghp" value="https://nuget.pkg.github.com/GrognardsFromHell/index.json" protocolVersion="3" />
  #           </packageSources>
  #           <packageSourceCredentials>
  #             <ghp>
  #               <add key="Username" value="shartte" />
  #               <add key="ClearTextPassword" value="${{ secrets.GITHUB_TOKEN }}" />
  #             </ghp>
  #           </packageSourceCredentials>
  #         </configuration>' > nuget.config
  #     # Add a Nuget source so that the native libs will be found by dotnet cli
  #     - run: nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/shartte/index.json" -UserName shartte -Password ${{ secrets.GITHUB_TOKEN }}
  #     - run: dotnet publish -c Release -o dist --self-contained --version-suffix ${GITHUB_SHA::8} -r osx-x64 Launcher
  #     - run: tar cfJ a opentemple-mac.tar.xz dist
  #     - uses: actions/upload-artifact@v1
  #       with:
  #         name: opentemple-mac
  #         path: opentemple-mac.tar.xz
