
name: Tests
on:
  push:
  pull_request:

jobs:
  build-windows:
    name: Test for Windows
    runs-on: windows-2022
    permissions:
      checks: write
      statuses: write
    steps:
      - uses: actions/checkout@v1
        with:
          lfs: true
      - name: Cache Testdata
        id: cache-testdata
        uses: actions/cache@v2
        with:
          path: ${{ env.GITHUB_WORKSPACE }}/testdata.7z
          key: testdata-2
      - name: Download Testdata
        if: steps.cache-testdata.outputs.cache-hit != 'true'
        run: |
          mkdir ~/testdata-download
          curl ${{ secrets.TEST_DATA_URL }} -o "${{ env.GITHUB_WORKSPACE }}/testdata.7z"
      - name: Extract Testdata
        run: |
          mkdir testdata
          7z x -o"${{ env.TOEE_DIR }}" -p${{ secrets.TEST_DATA_KEY }} "${{ env.GITHUB_WORKSPACE }}/testdata.7z"
        env:
          TOEE_DIR: ${{ github.workspace }}/testdata
      - name: Download FFMPEG
        run: |
          curl -L -o ffmpeg.7z https://github.com/GyanD/codexffmpeg/releases/download/4.4/ffmpeg-4.4-full_build-shared.7z
          7z x ffmpeg.7z
          Rename-Item ffmpeg-4.4-full_build-shared ffmpeg
      - name: Run Unit Tests
        run: dotnet test --configuration Release --logger GitHubActions --logger "trx;LogFileName=results.trx"
        env:
          TOEE_DIR: ${{ github.workspace }}/testdata
      - name: Upload attached unit test artifacts
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: test_results_windows
          path: Tests/TestResults
          retention-days: 5
      - uses: dorny/test-reporter@v1
        if: ${{ always() }}
        with:
          name: Tests (Windows)
          path: "Tests/TestResults/*.trx"
          reporter: dotnet-trx

  # Can currently not build on Linux because of Windows Forms
  # build-linux64:
  #   name: Build (Linux 64-bit)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #       with:
  #         lfs: true
  #     - run: dotnet publish -c Release -o dist --self-contained --version-suffix ${GITHUB_SHA::8} -r linux-x64 Launcher
  #     - run: tar cfJ a opentemple-linux.tar.xz dist
  #       shell: bash
  #     - uses: actions/upload-artifact@v1
  #       with:
  #         name: opentemple-linux
  #         path: opentemple-linux.tar.xz
  # build-osx:
  #   name: Build (MacOS 64-bit)
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #       with:
  #         lfs: true
  #     - run: dotnet publish -c Release -o dist --self-contained --version-suffix ${GITHUB_SHA::8} -r osx-x64 Launcher
  #     - run: tar cfJ a opentemple-mac.tar.xz dist
  #     - uses: actions/upload-artifact@v1
  #       with:
  #         name: opentemple-mac
  #         path: opentemple-mac.tar.xz
