
name: CI
on: [push]

jobs:
  build-win64:
    name: Build (Windows 64-bit)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
        with:
          lfs: true
      # Authenticates packages to push to GPR
      - uses: actions/setup-dotnet@master
        with:
          source-url: https://nuget.pkg.github.com/shartte/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      # Add a Nuget source so that the native libs will be found by dotnet cli
      - run: dotnet publish -c Release -o dist/x64 --version-suffix ${GITHUB_SHA::8} -r win-x64 Launcher
        shell: bash
      - run: dotnet publish -c Release -o dist/x86 --version-suffix ${GITHUB_SHA::8} -r win-x86 Launcher
        shell: bash
      - run: 7z a spicytemple-windows-x64.7z ./dist/x64/*
        shell: bash
      - uses: actions/upload-artifact@v1
        with:
          name: spicytemple-windows-x64
          path: spicytemple-windows-x64.7z
      ### Create MSIX packages
      - name: Create MSIX Packages and Bundle
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          mkdir packages
          makeappx pack /d dist/x64 /p packages/OpenTemple_x64.msix
          makeappx pack /d dist/x86 /p packages/OpenTemple_x86.msix
          makeappx bundle /d packages /p OpenTemple.msixbundle
        # Need to use cmd in order to make use of visual studio developer prompt,
        # otherwise signtool/makeappx are not in path!
        shell: cmd
      ### Sign (only if on master branch)
      - name: Create nightly code signing certificate from secret
        run: echo $CODE_SIGNING_PFX | base64 -d - > ./OpenTemple.pfx
        shell: bash
        env:
          CODE_SIGNING_PFX: ${{ secrets.CODE_SIGNING_PFX }}
        if: github.ref == 'refs/heads/master'
      - name: Sign Bundle
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          SignTool sign /fd SHA256 /a /f OpenTemple.pfx /p %CODE_SIGNING_PW% OpenTemple.msixbundle
        env:
          CODE_SIGNING_PW: ${{ secrets.CODE_SIGNING_PW }}
        if: github.ref == 'refs/heads/master'
        shell: cmd
      - uses: actions/upload-artifact@v1
        with:
          name: OpenTemple.msixbundle
          path: OpenTemple.msixbundle
  # Can currently not build on Linux because of Windows Forms
  # build-linux64:
  #   name: Build (Linux 64-bit)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #       with:
  #         lfs: true
  #     # Add a Nuget source so that the native libs will be found by dotnet cli
  #     - run: |2
  #         echo '<?xml version="1.0" encoding="utf-8"?>
  #         <configuration>
  #           <packageSources>
  #             <add key="ghp" value="https://nuget.pkg.github.com/shartte/index.json" protocolVersion="3" />
  #           </packageSources>
  #           <packageSourceCredentials>
  #             <ghp>
  #               <add key="Username" value="shartte" />
  #               <add key="ClearTextPassword" value="${{ secrets.GITHUB_TOKEN }}" />
  #             </ghp>
  #           </packageSourceCredentials>
  #         </configuration>' > nuget.config
  #     - run: dotnet publish -c Release -o dist --self-contained --version-suffix ${GITHUB_SHA::8} -r linux-x64 Launcher
  #     - run: tar cfJ a spicytemple-linux.tar.xz dist
  #       shell: bash
  #     - uses: actions/upload-artifact@v1
  #       with:
  #         name: spicytemple-linux
  #         path: spicytemple-linux.tar.xz
  # build-osx:
  #   name: Build (MacOS 64-bit)
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #       with:
  #         lfs: true
  #     # Add a Nuget source so that the native libs will be found by dotnet cli
  #     - run: |2
  #         echo '<?xml version="1.0" encoding="utf-8"?>
  #         <configuration>
  #           <packageSources>
  #             <add key="ghp" value="https://nuget.pkg.github.com/shartte/index.json" protocolVersion="3" />
  #           </packageSources>
  #           <packageSourceCredentials>
  #             <ghp>
  #               <add key="Username" value="shartte" />
  #               <add key="ClearTextPassword" value="${{ secrets.GITHUB_TOKEN }}" />
  #             </ghp>
  #           </packageSourceCredentials>
  #         </configuration>' > nuget.config
  #     # Add a Nuget source so that the native libs will be found by dotnet cli
  #     - run: nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/shartte/index.json" -UserName shartte -Password ${{ secrets.GITHUB_TOKEN }}
  #     - run: dotnet publish -c Release -o dist --self-contained --version-suffix ${GITHUB_SHA::8} -r osx-x64 Launcher
  #     - run: tar cfJ a spicytemple-mac.tar.xz dist
  #     - uses: actions/upload-artifact@v1
  #       with:
  #         name: spicytemple-mac
  #         path: spicytemple-mac.tar.xz
